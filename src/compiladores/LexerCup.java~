/* The following code was generated by JFlex 1.4.3 on 11/12/19 23:24 */

package compiladores;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/12/19 23:24 from the specification file
 * <tt>D:/Multimedia/Documentos/NetBeansProjects/compiladores/src/compiladores/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 47,  0, 51,  0, 29, 44,  0, 35, 36,  6, 40,  3, 41, 38,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 33, 37, 28, 48, 31, 39, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 32,  0, 34, 42, 49, 
     0, 15, 10, 22, 21, 12, 24, 23, 19,  7,  1, 52, 17, 14,  8, 16, 
    26, 50, 20, 18,  9, 13, 25, 53, 43, 11, 54, 27, 45, 30, 46,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\13\2"+
    "\1\7\7\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\2\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\2\1\4\1\36\1\37\1\40\2\2\1\41"+
    "\26\2\1\42\11\2\1\43\16\2\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\0\1\52\1\0\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\2\1\61\1\62\1\42"+
    "\1\63\1\64\1\65\2\2\1\66\3\2\1\67\2\2"+
    "\1\33\4\2\1\70\17\2\1\61\1\2\1\71\7\2"+
    "\1\72\21\2\1\73\11\2\1\74\1\75\1\0\1\76"+
    "\1\77\1\27\12\2\1\100\1\2\1\101\3\2\1\102"+
    "\7\2\1\103\1\104\21\2\1\105\5\2\1\106\10\2"+
    "\1\3\15\2\1\107\1\2\1\31\1\110\3\2\1\111"+
    "\1\2\1\112\2\2\1\63\14\2\1\113\1\2\1\114"+
    "\1\32\1\115\1\116\10\2\1\117\1\2\1\120\4\2"+
    "\1\64\1\121\3\2\1\122\1\123\1\124\3\2\1\62"+
    "\1\2\1\125\1\126\1\127\1\130\1\131\1\2\1\132"+
    "\2\2\1\133\3\2\1\134\2\2\1\135\2\2\1\60"+
    "\1\2\1\136\3\2\1\137\3\2\1\140\5\2\1\141"+
    "\2\2\1\142\2\2\1\143\1\2\1\144\1\145\1\146"+
    "\1\147\1\150\2\2\1\151\1\2\1\152\1\2\1\153"+
    "\1\2\1\154\7\2\1\155\1\156\3\2\1\157\3\2"+
    "\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\156\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\67\0\u055f\0\u0596\0\67\0\u05cd\0\67"+
    "\0\u0604\0\67\0\u063b\0\67\0\67\0\u0672\0\67\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\67\0\u07f3\0\u082a"+
    "\0\67\0\u0861\0\u0898\0\67\0\67\0\67\0\u08cf\0\u0906"+
    "\0\156\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\67\0\67\0\u138d\0\67\0\67\0\u13c4\0\67"+
    "\0\u13fb\0\67\0\67\0\u1432\0\67\0\67\0\67\0\u1469"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u14a0\0\u14d7"+
    "\0\156\0\u150e\0\u1545\0\u157c\0\156\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\156\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\156\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\156\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\156\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\67\0\67\0\u21f2\0\67\0\67\0\u2229"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\156\0\u2486\0\156\0\u24bd\0\u24f4\0\u252b"+
    "\0\156\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\156\0\156\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\156\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u2b66\0\156\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0"+
    "\0\u2ce7\0\u2d1e\0\67\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\156\0\u3020\0\156\0\156\0\u3057\0\u308e\0\u30c5\0\156"+
    "\0\u30fc\0\156\0\u3133\0\u316a\0\156\0\u31a1\0\u31d8\0\u320f"+
    "\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u33fe\0\156\0\u3435\0\u346c\0\156\0\156\0\156\0\u34a3"+
    "\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\156"+
    "\0\u365b\0\156\0\u3692\0\u36c9\0\u3700\0\u3737\0\156\0\156"+
    "\0\u376e\0\u37a5\0\u37dc\0\156\0\156\0\156\0\u3813\0\u384a"+
    "\0\u3881\0\156\0\u38b8\0\156\0\156\0\u38ef\0\156\0\156"+
    "\0\u3926\0\156\0\u395d\0\u3994\0\156\0\u39cb\0\u3a02\0\u3a39"+
    "\0\156\0\u3a70\0\u3aa7\0\156\0\u3ade\0\u3b15\0\156\0\u3b4c"+
    "\0\156\0\u3b83\0\u3bba\0\u3bf1\0\156\0\u3c28\0\u3c5f\0\u3c96"+
    "\0\156\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\156\0\u3de0"+
    "\0\u3e17\0\156\0\u3e4e\0\u3e85\0\156\0\u3ebc\0\156\0\156"+
    "\0\156\0\156\0\156\0\u3ef3\0\u3f2a\0\156\0\u3f61\0\156"+
    "\0\u3f98\0\156\0\u3fcf\0\156\0\u4006\0\u403d\0\u4074\0\u40ab"+
    "\0\u40e2\0\u4119\0\u4150\0\156\0\156\0\u4187\0\u41be\0\u41f5"+
    "\0\156\0\u422c\0\u4263\0\u429a\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\2\3\1\61\1\3\1\62\1\3\70\0\2\3"+
    "\4\0\24\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\2\0\1\4\67\0\1\5\1\0\1\5\65\0\1\63"+
    "\1\0\1\64\51\0\1\65\66\0\1\66\7\0\2\3"+
    "\4\0\1\3\1\67\7\3\1\70\7\3\1\71\2\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\5\3\1\72\1\73\1\3\1\74\1\75\12\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\4\3\1\76\1\77\6\3\1\100\1\101\6\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\1\102\3\3\1\103\4\3\1\104\3\3\1\105"+
    "\6\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\106\10\3\1\107\11\3\20\0"+
    "\1\110\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\111\11\3\1\112\10\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\6\3\1\113"+
    "\1\3\1\114\13\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\115\4\3\1\116"+
    "\4\3\1\117\10\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\15\3\1\120\5\3\1\121"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\11\3\1\122\12\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\1\123\1\3\1\124"+
    "\11\3\1\125\7\3\20\0\1\3\5\0\2\3\1\0"+
    "\1\3\1\126\1\3\1\0\2\3\4\0\5\3\1\127"+
    "\16\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\4\3\1\130\1\131\3\3\1\132\12\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\10\3\1\133\1\134\1\135\1\3\1\136\7\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\11\3\1\137\12\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\10\3\1\140\1\141"+
    "\1\142\2\3\1\143\6\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\1\144\4\3\1\145"+
    "\3\3\1\146\12\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\6\3\1\147\6\3\1\150"+
    "\6\3\20\0\1\3\5\0\2\3\1\0\3\3\34\0"+
    "\1\151\1\33\3\0\1\40\16\0\1\152\45\0\1\36"+
    "\20\0\1\153\45\0\1\154\20\0\1\155\45\0\1\42"+
    "\1\0\1\156\76\0\1\157\23\0\1\160\37\0\1\161"+
    "\70\0\1\162\7\0\1\163\45\0\1\164\11\0\1\165"+
    "\6\0\1\166\66\0\1\167\7\0\2\3\4\0\11\3"+
    "\1\170\12\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\54\0\1\171\3\0\1\172\63\0\1\173\2\0\1\174"+
    "\66\0\1\175\66\0\1\176\7\0\2\3\4\0\14\3"+
    "\1\177\2\3\1\200\4\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\5\63\1\0\61\63\1\0\2\3\4\0"+
    "\2\3\1\201\7\3\1\202\4\3\1\203\4\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\13\3\1\204\10\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\24\3\20\0\1\3\5\0"+
    "\2\3\1\0\1\3\1\205\1\3\1\0\2\3\4\0"+
    "\7\3\1\206\14\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\7\3\1\207\14\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\210\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\23\3\1\211\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\7\3"+
    "\1\212\14\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\213\14\3\1\214\6\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\4\3\1\215\1\3\1\216\15\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\2\3\1\217"+
    "\21\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\2\3\1\220\21\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\11\3\1\221"+
    "\12\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\222\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\6\3\1\223"+
    "\15\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\13\3\1\224\10\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\2\3\1\225"+
    "\20\3\1\226\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\227\12\3\1\230\10\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\1\231\23\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\2\3\1\232\21\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\1\233"+
    "\1\3\1\234\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\16\3\1\235\5\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\236\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\7\3\1\237\14\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\24\3\20\0\1\3\5\0\1\240\1\3\1\0\3\3"+
    "\1\0\2\3\4\0\5\3\1\241\16\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\242\22\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\20\3\1\243\3\3\20\0\1\3"+
    "\5\0\2\3\1\0\2\3\1\244\1\0\2\3\4\0"+
    "\10\3\1\245\4\3\1\246\1\247\5\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\11\3"+
    "\1\250\12\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\251\23\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\1\252\1\3"+
    "\1\253\15\3\1\254\3\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\1\3\1\255\22\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\12\3\1\256\6\3\1\257\2\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\6\3"+
    "\1\260\15\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\2\3\1\261\10\3\1\262\10\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\263\5\3\1\264\14\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\10\3"+
    "\1\265\13\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\10\3\1\266\13\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\2\3"+
    "\1\267\21\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\12\3\1\270\11\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\15\3"+
    "\1\271\6\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\11\3\1\272\12\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\1\273"+
    "\23\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\15\3\1\274\6\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\17\3\1\275"+
    "\4\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\1\276\11\3\1\277\11\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\3\3"+
    "\1\300\20\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\301\10\3\1\302\12\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\60\0\1\303\66\0"+
    "\1\304\10\0\1\305\132\0\1\306\26\0\1\307\61\0"+
    "\2\3\4\0\15\3\1\310\6\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\1\311\23\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\14\3\1\312\7\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\1\313\23\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\12\3\1\314\11\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\2\3\1\315\21\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\5\3\1\316\16\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\5\3\1\317\16\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\24\3\20\0\1\3\5\0\1\320\1\3\1\0\3\3"+
    "\1\0\2\3\4\0\5\3\1\321\16\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\23\3"+
    "\1\322\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\13\3\1\323\10\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\11\3\1\324"+
    "\12\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\325\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\10\3\1\326"+
    "\1\327\12\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\5\3\1\201\16\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\12\3"+
    "\1\201\11\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\10\3\1\330\13\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\7\3"+
    "\1\201\14\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\5\3\1\331\16\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\332\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\11\3\1\333\1\334\11\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\11\3\1\335\12\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\1\336\23\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\337\22\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\10\3\1\340\13\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\341\22\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\14\3\1\342\7\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\24\3"+
    "\20\0\1\3\5\0\1\343\1\3\1\0\3\3\1\0"+
    "\2\3\4\0\11\3\1\201\12\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\5\3\1\344"+
    "\16\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\15\3\1\345\6\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\20\3\1\201"+
    "\3\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\346\22\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\5\3\1\347"+
    "\16\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\2\3\1\350\21\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\1\122\5\3"+
    "\1\351\15\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\15\3\1\352\6\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\2\3"+
    "\1\353\21\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\354\22\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\6\3"+
    "\1\355\15\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\356\23\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\10\3\1\357"+
    "\13\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\360\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\10\3\1\361"+
    "\13\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\3\3\1\362\20\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\17\3\1\363"+
    "\4\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\364\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\1\365\1\3"+
    "\1\366\10\3\1\367\10\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\23\3\1\370\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\13\3\1\371\10\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\15\3\1\201\6\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\11\3\1\372\12\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\13\3\1\373\10\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\10\3\1\352\13\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\5\3\1\374\16\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\375\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\2\3\1\376\21\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\16\3\1\201\5\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\10\3\1\377\13\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\12\3\1\u0100\11\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\22\3\1\u0101\1\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\u0102\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\2\0\1\305\41\0\1\u0103\23\0\2\3\4\0"+
    "\24\3\20\0\1\3\5\0\1\u0104\1\3\1\0\3\3"+
    "\1\0\2\3\4\0\12\3\1\u0105\11\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\10\3"+
    "\1\u0106\13\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\u0107\22\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\6\3"+
    "\1\u0108\15\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\15\3\1\u0109\6\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\15\3"+
    "\1\u010a\6\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\13\3\1\u010b\10\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\u010c\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\u010d\1\u010e\14\3\1\u010f\5\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\12\3\1\u0110\11\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\24\3\20\0\1\3"+
    "\5\0\2\3\1\0\1\3\1\u0111\1\3\1\0\2\3"+
    "\4\0\1\3\1\u0112\22\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\15\3\1\u0113\6\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\24\3\20\0\1\3\5\0\2\3\1\0\1\u0114"+
    "\2\3\1\0\2\3\4\0\15\3\1\u0115\6\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\15\3\1\u0116\6\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\1\u0117\23\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\u0118\22\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\20\3\1\u0119\3\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\20\3"+
    "\1\u011a\3\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\3\3\1\u011b\20\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\u011c\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\24\3\20\0\1\3\5\0\1\3"+
    "\1\u011d\1\0\3\3\1\0\2\3\4\0\10\3\1\u011e"+
    "\13\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\u011f\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\11\3\1\u0120"+
    "\12\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\1\u0121\23\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\17\3\1\u0122\4\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\2\3\1\201\21\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\17\3\1\u0123\4\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\2\3\1\u0124\21\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\15\3\1\u0125\6\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\13\3\1\u0126\10\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\7\3\1\u0127\14\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\2\3\1\u0128\21\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\6\3\1\u0129\15\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\12\3\1\220\11\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\14\3\1\u012a\7\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\11\3\1\342\12\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\1\u012b\23\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\u012c\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\12\3\1\u012d\11\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\13\3\1\u012e\10\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\5\3\1\u012f\16\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\u0130\22\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\6\3\1\u0131\15\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\11\3\1\u0132\12\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\2\3\1\u0133\21\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\1\u0134\23\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\10\3\1\u0135\13\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\u0136\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\5\3\1\u0137\16\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\u0138\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\15\3\1\u0139\6\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\u013a\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\16\3\1\u013b\5\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\u013c\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\u013d\23\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\23\3\1\u013e"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\24\3\20\0\1\3\5\0\1\3\1\u013f\1\0"+
    "\3\3\1\0\2\3\4\0\16\3\1\u0140\5\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\10\3\1\u0141\13\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\5\3\1\u0142\16\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\10\3\1\u0143\13\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\16\3\1\u0144\5\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\u0145\22\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\2\3\1\u0146\21\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\17\3\1\u0147\4\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\u0148\22\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\12\3\1\u0149\11\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\24\3\20\0\1\3\5\0"+
    "\1\3\1\u014a\1\0\3\3\1\0\2\3\4\0\2\3"+
    "\1\u014b\21\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\16\3\1\u014c\5\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\21\3"+
    "\1\u014d\2\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\17\3\1\u014e\4\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\2\3"+
    "\1\u014f\21\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\14\3\1\u0150\7\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\5\3"+
    "\1\u0151\16\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\u0152\22\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\2\3"+
    "\1\u0153\21\3\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\u0154\23\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\5\3\1\u0155"+
    "\16\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\12\3\1\u0156\11\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\1\3\1\u0157"+
    "\22\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\24\3\20\0\1\3\5\0\1\u0158\1\3"+
    "\1\0\3\3\1\0\2\3\4\0\16\3\1\u0159\5\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\10\3\1\u015a\13\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\15\3\1\342\6\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\1\u015b\23\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\17\3\1\u015c\4\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\u015d\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\17\3\1\u015e\4\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\24\3\20\0\1\3\5\0\1\3\1\u015f\1\0\3\3"+
    "\1\0\2\3\4\0\24\3\20\0\1\3\5\0\1\u0160"+
    "\1\3\1\0\3\3\1\0\2\3\4\0\5\3\1\u0161"+
    "\16\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\10\3\1\u0162\13\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\17\3\1\342"+
    "\4\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\10\3\1\u0163\13\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\7\3\1\u0164"+
    "\14\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\21\3\1\u0165\2\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\2\3\1\u0166"+
    "\21\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\1\u0167\23\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\5\3\1\u0168\16\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\5\3\1\u0169\16\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\11\3\1\u016a\12\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\24\3\20\0\1\3\5\0\1\u016b\1\3\1\0"+
    "\3\3\1\0\2\3\4\0\15\3\1\u016c\6\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\5\3\1\u016d\16\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\17\3\1\u016e\4\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\u016f\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\6\3\1\u0170\15\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\17\3\1\u0171\4\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\12\3\1\u0172\11\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\12\3\1\u0173\11\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\5\3\1\u015c\16\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\u0174\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\2\3\1\u0175\21\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\7\3\1\342\14\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\17\3\1\u0176\4\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\5\3\1\u0177\16\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\5\3\1\u0178\16\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\2\3\1\u0179\21\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\16\3\1\u017a\5\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\15\3\1\u017b\6\3\20\0\1\3\5\0\2\3\1\0"+
    "\3\3\1\0\2\3\4\0\17\3\1\u017c\4\3\20\0"+
    "\1\3\5\0\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\23\3\1\u017d\20\0\1\3\5\0\2\3\1\0\3\3"+
    "\1\0\2\3\4\0\15\3\1\u017e\6\3\20\0\1\3"+
    "\5\0\2\3\1\0\3\3\1\0\2\3\4\0\24\3"+
    "\20\0\1\3\5\0\1\u017f\1\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\u0180\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\10\3\1\u0181"+
    "\13\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\u0182\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\5\3\1\u0183"+
    "\16\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\5\3\1\u0184\16\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\10\3\1\u0185"+
    "\13\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\15\3\1\u0186\6\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\17\3\1\u0187"+
    "\4\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\13\3\1\u0188\10\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\16\3\1\u015c"+
    "\5\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\13\3\1\u0189\10\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\5\3\1\u018a"+
    "\16\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\10\3\1\u018b\13\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\2\3\1\u018c"+
    "\21\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\2\3\1\u018d\21\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\2\3\1\u018e"+
    "\21\3\20\0\1\3\5\0\2\3\1\0\3\3\1\0"+
    "\2\3\4\0\13\3\1\u018f\10\3\20\0\1\3\5\0"+
    "\2\3\1\0\3\3\1\0\2\3\4\0\24\3\20\0"+
    "\1\3\5\0\1\u0190\1\3\1\0\3\3\1\0\2\3"+
    "\4\0\2\3\1\u0191\21\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\17\3\1\u0192\4\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\10\3\1\u0193\13\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3\1\0\2\3\4\0\13\3\1\u0194\10\3"+
    "\20\0\1\3\5\0\2\3\1\0\3\3\1\0\2\3"+
    "\4\0\2\3\1\u0195\21\3\20\0\1\3\5\0\2\3"+
    "\1\0\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17105];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\6\1\1\11"+
    "\2\1\1\11\2\1\3\11\63\1\2\11\1\1\2\11"+
    "\1\0\1\11\1\0\2\11\1\1\3\11\1\1\6\11"+
    "\104\1\2\11\1\0\2\11\73\1\1\11\222\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return new Symbol(sym.SLEQ, yychar, yyline, yytext());
          }
        case 113: break;
        case 2: 
          { return new Symbol(sym.ident, yychar, yyline, yytext());
          }
        case 114: break;
        case 92: 
          { return new Symbol(sym.FRIEND, yychar, yyline, yytext());
          }
        case 115: break;
        case 38: 
          { return new Symbol(sym.MODEQ, yychar, yyline, yytext());
          }
        case 116: break;
        case 9: 
          { return new Symbol(sym.id23, yychar, yyline, yytext());
          }
        case 117: break;
        case 41: 
          { return new Symbol(sym.COLONCOLON, yychar, yyline, yytext());
          }
        case 118: break;
        case 56: 
          { return new Symbol(sym.TRY, yychar, yyline, yytext());
          }
        case 119: break;
        case 82: 
          { return new Symbol(sym.id18, yychar, yyline, yytext());
          }
        case 120: break;
        case 112: 
          { return new Symbol(sym.REINTERPRET_CAST, yychar, yyline, yytext());
          }
        case 121: break;
        case 53: 
          { return new Symbol(sym.EQ, yychar, yyline, yytext());
          }
        case 122: break;
        case 5: 
          { return new Symbol(sym.id14, yychar, yyline, yytext());
          }
        case 123: break;
        case 14: 
          { return new Symbol(sym.id8, yychar, yyline, yytext());
          }
        case 124: break;
        case 64: 
          { return new Symbol(sym.THIS, yychar, yyline, yytext());
          }
        case 125: break;
        case 54: 
          { return new Symbol(sym.T_dato, yychar, yyline, yytext());
          }
        case 126: break;
        case 104: 
          { return new Symbol(sym.OPERATOR, yychar, yyline, yytext());
          }
        case 127: break;
        case 48: 
          { return new Symbol(sym.XOREQ, yychar, yyline, yytext());
          }
        case 128: break;
        case 108: 
          { return new Symbol(sym.NAMESPACE, yychar, yyline, yytext());
          }
        case 129: break;
        case 91: 
          { return new Symbol(sym.DELETE, yychar, yyline, yytext());
          }
        case 130: break;
        case 59: 
          { return new Symbol(sym.FOR, yychar, yyline, yytext());
          }
        case 131: break;
        case 33: 
          { return new Symbol(sym.IF, yychar, yyline, yytext());
          }
        case 132: break;
        case 52: 
          { return new Symbol(sym.NOTEQ, yychar, yyline, yytext());
          }
        case 133: break;
        case 78: 
          { return new Symbol(sym.FALSE, yychar, yyline, yytext());
          }
        case 134: break;
        case 62: 
          { return new Symbol(sym.ELLIPSIS, yychar, yyline, yytext());
          }
        case 135: break;
        case 73: 
          { return new Symbol(sym.UNION, yychar, yyline, yytext());
          }
        case 136: break;
        case 8: 
          { return new Symbol(sym.id1, yychar, yyline, yytext());
          }
        case 137: break;
        case 67: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 138: break;
        case 45: 
          { return new Symbol(sym.ARROW, yychar, yyline, yytext());
          }
        case 139: break;
        case 35: 
          { return new Symbol(sym.DO, yychar, yyline, yytext());
          }
        case 140: break;
        case 101: 
          { return new Symbol(sym.TEMPLATE, yychar, yyline, yytext());
          }
        case 141: break;
        case 89: 
          { return new Symbol(sym.SWITCH, yychar, yyline, yytext());
          }
        case 142: break;
        case 105: 
          { return new Symbol(sym.REGISTER, yychar, yyline, yytext());
          }
        case 143: break;
        case 96: 
          { return new Symbol(sym.MUTABLE, yychar, yyline, yytext());
          }
        case 144: break;
        case 4: 
          { /*Ignore*/
          }
        case 145: break;
        case 26: 
          { return new Symbol(sym.id20, yychar, yyline, yytext());
          }
        case 146: break;
        case 111: 
          { return new Symbol(sym.DYNAMIC_CAST, yychar, yyline, yytext());
          }
        case 147: break;
        case 79: 
          { return new Symbol(sym.WHILE, yychar, yyline, yytext());
          }
        case 148: break;
        case 10: 
          { return new Symbol(sym.id15, yychar, yyline, yytext());
          }
        case 149: break;
        case 20: 
          { return new Symbol(sym.id9, yychar, yyline, yytext());
          }
        case 150: break;
        case 21: 
          { return new Symbol(sym.id11, yychar, yyline, yytext());
          }
        case 151: break;
        case 83: 
          { return new Symbol(sym.EXTERN, yychar, yyline, yytext());
          }
        case 152: break;
        case 16: 
          { return new Symbol(sym.id5, yychar, yyline, yytext());
          }
        case 153: break;
        case 57: 
          { return new Symbol(sym.ASM, yychar, yyline, yytext());
          }
        case 154: break;
        case 81: 
          { return new Symbol(sym.TYPEID, yychar, yyline, yytext());
          }
        case 155: break;
        case 31: 
          { return new Symbol(sym.DIVEQ, yychar, yyline, yytext());
          }
        case 156: break;
        case 76: 
          { return new Symbol(sym.CONST, yychar, yyline, yytext());
          }
        case 157: break;
        case 36: 
          { return new Symbol(sym.SL, yychar, yyline, yytext());
          }
        case 158: break;
        case 12: 
          { return new Symbol(sym.id24, yychar, yyline, yytext());
          }
        case 159: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 160: break;
        case 3: 
          { return new Symbol(sym.numero, yychar, yyline, yytext());
          }
        case 161: break;
        case 25: 
          { return new Symbol(sym.id19, yychar, yyline, yytext());
          }
        case 162: break;
        case 107: 
          { return new Symbol(sym.VOLATILE, yychar, yyline, yytext());
          }
        case 163: break;
        case 47: 
          { return new Symbol(sym.SUBEQ, yychar, yyline, yytext());
          }
        case 164: break;
        case 34: 
          { return new Symbol(sym.OROR, yychar, yyline, yytext());
          }
        case 165: break;
        case 63: 
          { return new Symbol(sym.ARROWSTAR, yychar, yyline, yytext());
          }
        case 166: break;
        case 102: 
          { return new Symbol(sym.EXPLICIT, yychar, yyline, yytext());
          }
        case 167: break;
        case 42: 
          { return new Symbol(sym.DOTSTAR, yychar, yyline, yytext());
          }
        case 168: break;
        case 43: 
          { return new Symbol(sym.PLUSPLUS, yychar, yyline, yytext());
          }
        case 169: break;
        case 65: 
          { return new Symbol(sym.TRUE, yychar, yyline, yytext());
          }
        case 170: break;
        case 22: 
          { return new Symbol(sym.id12, yychar, yyline, yytext());
          }
        case 171: break;
        case 17: 
          { return new Symbol(sym.id6, yychar, yyline, yytext());
          }
        case 172: break;
        case 100: 
          { return new Symbol(sym.TYPENAME, yychar, yyline, yytext());
          }
        case 173: break;
        case 11: 
          { return new Symbol(sym.id2, yychar, yyline, yytext());
          }
        case 174: break;
        case 88: 
          { return new Symbol(sym.STRUCT, yychar, yyline, yytext());
          }
        case 175: break;
        case 69: 
          { return new Symbol(sym.CASE, yychar, yyline, yytext());
          }
        case 176: break;
        case 98: 
          { return new Symbol(sym.VIRTUAL, yychar, yyline, yytext());
          }
        case 177: break;
        case 27: 
          { return new Symbol(sym.id21, yychar, yyline, yytext());
          }
        case 178: break;
        case 95: 
          { return new Symbol(sym.TYPEDEF, yychar, yyline, yytext());
          }
        case 179: break;
        case 66: 
          { return new Symbol(sym.ELSE, yychar, yyline, yytext());
          }
        case 180: break;
        case 99: 
          { return new Symbol(sym.WCHAR_T, yychar, yyline, yytext());
          }
        case 181: break;
        case 23: 
          { return new Symbol(sym.id16, yychar, yyline, yytext());
          }
        case 182: break;
        case 85: 
          { return new Symbol(sym.SIGNED, yychar, yyline, yytext());
          }
        case 183: break;
        case 55: 
          { return new Symbol(sym.NEW, yychar, yyline, yytext());
          }
        case 184: break;
        case 61: 
          { return new Symbol(sym.SREQ, yychar, yyline, yytext());
          }
        case 185: break;
        case 51: 
          { return new Symbol(sym.OREQ, yychar, yyline, yytext());
          }
        case 186: break;
        case 7: 
          { return new Symbol(sym.Letra_H, yychar, yyline, yytext());
          }
        case 187: break;
        case 110: 
          { return new Symbol(sym.STATIC_CAST, yychar, yyline, yytext());
          }
        case 188: break;
        case 106: 
          { return new Symbol(sym.CONTINUE, yychar, yyline, yytext());
          }
        case 189: break;
        case 86: 
          { return new Symbol(sym.SIZEOF, yychar, yyline, yytext());
          }
        case 190: break;
        case 13: 
          { return new Symbol(sym.id3, yychar, yyline, yytext());
          }
        case 191: break;
        case 94: 
          { return new Symbol(sym.Include, yychar, yyline, yytext());
          }
        case 192: break;
        case 32: 
          { return new Symbol(sym.MULEQ, yychar, yyline, yytext());
          }
        case 193: break;
        case 72: 
          { return new Symbol(sym.BREAK, yychar, yyline, yytext());
          }
        case 194: break;
        case 30: 
          { return new Symbol(sym.coment_1, yychar, yyline, yytext());
          }
        case 195: break;
        case 87: 
          { return new Symbol(sym.STATIC, yychar, yyline, yytext());
          }
        case 196: break;
        case 75: 
          { return new Symbol(sym.CATCH, yychar, yyline, yytext());
          }
        case 197: break;
        case 28: 
          { return new Symbol(sym.id22, yychar, yyline, yytext());
          }
        case 198: break;
        case 103: 
          { return new Symbol(sym.UNSIGNED, yychar, yyline, yytext());
          }
        case 199: break;
        case 70: 
          { return new Symbol(sym.GOTO, yychar, yyline, yytext());
          }
        case 200: break;
        case 50: 
          { return new Symbol(sym.ANDEQ, yychar, yyline, yytext());
          }
        case 201: break;
        case 109: 
          { return new Symbol(sym.CONST_CAST, yychar, yyline, yytext());
          }
        case 202: break;
        case 6: 
          { return new Symbol(sym.id13, yychar, yyline, yytext());
          }
        case 203: break;
        case 18: 
          { return new Symbol(sym.id7, yychar, yyline, yytext());
          }
        case 204: break;
        case 97: 
          { return new Symbol(sym.DEFAULT, yychar, yyline, yytext());
          }
        case 205: break;
        case 49: 
          { return new Symbol(sym.ANDAND, yychar, yyline, yytext());
          }
        case 206: break;
        case 44: 
          { return new Symbol(sym.ADDEQ, yychar, yyline, yytext());
          }
        case 207: break;
        case 90: 
          { return new Symbol(sym.RETURN, yychar, yyline, yytext());
          }
        case 208: break;
        case 93: 
          { return new Symbol(sym.variables_glo, yychar, yyline, yytext());
          }
        case 209: break;
        case 80: 
          { return new Symbol(sym.INLINE, yychar, yyline, yytext());
          }
        case 210: break;
        case 29: 
          { return new Symbol(sym.id26, yychar, yyline, yytext());
          }
        case 211: break;
        case 37: 
          { return new Symbol(sym.LTEQ, yychar, yyline, yytext());
          }
        case 212: break;
        case 24: 
          { return new Symbol(sym.id17, yychar, yyline, yytext());
          }
        case 213: break;
        case 40: 
          { return new Symbol(sym.GTEQ, yychar, yyline, yytext());
          }
        case 214: break;
        case 68: 
          { return new Symbol(sym.Libreria, yychar, yyline, yytext());
          }
        case 215: break;
        case 58: 
          { return new Symbol(sym.STD, yychar, yyline, yytext());
          }
        case 216: break;
        case 77: 
          { return new Symbol(sym.CLASS, yychar, yyline, yytext());
          }
        case 217: break;
        case 71: 
          { return new Symbol(sym.THROW, yychar, yyline, yytext());
          }
        case 218: break;
        case 39: 
          { return new Symbol(sym.SR, yychar, yyline, yytext());
          }
        case 219: break;
        case 84: 
          { return new Symbol(sym.EXPORT, yychar, yyline, yytext());
          }
        case 220: break;
        case 19: 
          { return new Symbol(sym.id10, yychar, yyline, yytext());
          }
        case 221: break;
        case 15: 
          { return new Symbol(sym.id4, yychar, yyline, yytext());
          }
        case 222: break;
        case 74: 
          { return new Symbol(sym.USING, yychar, yyline, yytext());
          }
        case 223: break;
        case 46: 
          { return new Symbol(sym.MINUSMINUS, yychar, yyline, yytext());
          }
        case 224: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
