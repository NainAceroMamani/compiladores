
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 24 23:21:02 COT 2020
//----------------------------------------------------

package compiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 24 23:21:02 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\021\006\000\002\003\004\000\002\003\003" +
    "\000\002\015\004\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\004\000\002\015\003\000\002" +
    "\015\004\000\002\015\003\000\002\025\010\000\002\025" +
    "\012\000\002\025\011\000\002\026\014\000\002\004\011" +
    "\000\002\005\014\000\002\005\013\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\027\005\000\002\023\010\000\002\023\007\000\002" +
    "\024\005\000\002\024\006\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\005\000\002\024\002" +
    "\000\002\007\005\000\002\007\007\000\002\007\007\000" +
    "\002\007\006\000\002\010\023\000\002\010\022\000\002" +
    "\010\023\000\002\010\022\000\002\010\023\000\002\010" +
    "\022\000\002\010\023\000\002\010\022\000\002\011\013" +
    "\000\002\011\012\000\002\011\013\000\002\011\012\000" +
    "\002\011\013\000\002\011\012\000\002\011\013\000\002" +
    "\011\012\000\002\020\013\000\002\020\012\000\002\020" +
    "\013\000\002\020\012\000\002\020\013\000\002\020\012" +
    "\000\002\020\013\000\002\020\012\000\002\013\010\000" +
    "\002\012\011\000\002\014\010\000\002\014\007\000\002" +
    "\014\007\000\002\014\006\000\002\017\011\000\002\017" +
    "\007\000\002\016\006\000\002\016\005\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\037\004\001\002\000\004\041\370\001" +
    "\002\000\004\002\367\001\002\000\006\037\ufffc\157\ufffc" +
    "\001\002\000\006\037\004\157\012\001\002\000\006\037" +
    "\ufffd\157\ufffd\001\002\000\010\040\023\100\026\143\020" +
    "\001\002\000\004\124\013\001\002\000\004\141\014\001" +
    "\002\000\004\014\015\001\002\000\010\040\ufffe\100\ufffe" +
    "\143\ufffe\001\002\000\010\040\023\100\026\143\020\001" +
    "\002\000\010\040\ufff6\100\ufff6\143\ufff6\001\002\000\004" +
    "\165\354\001\002\000\010\040\ufffa\100\ufffa\143\ufffa\001" +
    "\002\000\004\002\uffff\001\002\000\006\165\316\167\317" +
    "\001\002\000\010\040\ufff4\100\ufff4\143\ufff4\001\002\000" +
    "\010\040\ufff8\100\ufff8\143\ufff8\001\002\000\004\165\027" +
    "\001\002\000\004\006\030\001\002\000\024\007\031\040" +
    "\046\116\052\121\042\130\043\135\036\144\041\164\033" +
    "\165\047\001\002\000\012\014\315\040\uffb3\100\uffb3\143" +
    "\uffb3\001\002\000\026\007\uffe6\040\uffe6\075\uffe6\116\uffe6" +
    "\121\uffe6\130\uffe6\135\uffe6\144\uffe6\164\uffe6\165\uffe6\001" +
    "\002\000\004\012\256\001\002\000\024\007\uffae\040\046" +
    "\116\052\121\042\130\uffae\135\036\144\041\164\033\165" +
    "\047\001\002\000\026\007\uffea\040\uffea\075\uffea\116\uffea" +
    "\121\uffea\130\uffea\135\uffea\144\uffea\164\uffea\165\uffea\001" +
    "\002\000\004\165\254\001\002\000\026\007\uffe9\040\uffe9" +
    "\075\uffe9\116\uffe9\121\uffe9\130\uffe9\135\uffe9\144\uffe9\164" +
    "\uffe9\165\uffe9\001\002\000\026\007\uffe1\040\uffe1\075\uffe1" +
    "\116\uffe1\121\uffe1\130\uffe1\135\uffe1\144\uffe1\164\uffe1\165" +
    "\uffe1\001\002\000\004\012\240\001\002\000\004\012\201" +
    "\001\002\000\004\015\177\001\002\000\006\007\172\130" +
    "\173\001\002\000\026\007\uffe3\040\uffe3\075\uffe3\116\uffe3" +
    "\121\uffe3\130\uffe3\135\uffe3\144\uffe3\164\uffe3\165\uffe3\001" +
    "\002\000\004\165\157\001\002\000\006\012\137\033\140" +
    "\001\002\000\026\007\uffdf\040\uffdf\075\uffdf\116\uffdf\121" +
    "\uffdf\130\uffdf\135\uffdf\144\uffdf\164\uffdf\165\uffdf\001\002" +
    "\000\026\007\uffe7\040\uffe7\075\uffe7\116\uffe7\121\uffe7\130" +
    "\uffe7\135\uffe7\144\uffe7\164\uffe7\165\uffe7\001\002\000\004" +
    "\012\053\001\002\000\004\040\054\001\002\000\004\165" +
    "\055\001\002\000\004\033\056\001\002\000\004\166\057" +
    "\001\002\000\004\014\060\001\002\000\004\165\061\001" +
    "\002\000\006\034\063\035\062\001\002\000\006\165\116" +
    "\166\115\001\002\000\006\165\065\166\064\001\002\000" +
    "\004\014\105\001\002\000\004\014\066\001\002\000\004" +
    "\165\067\001\002\000\004\070\070\001\002\000\004\013" +
    "\071\001\002\000\004\006\072\001\002\000\022\007\074" +
    "\040\046\116\052\121\042\135\036\144\041\164\033\165" +
    "\047\001\002\000\022\007\102\040\046\116\052\121\042" +
    "\135\036\144\041\164\033\165\047\001\002\000\026\007" +
    "\uffcf\040\uffcf\075\uffcf\116\uffcf\121\uffcf\130\uffcf\135\uffcf" +
    "\144\uffcf\164\uffcf\165\uffcf\001\002\000\026\007\uffe0\040" +
    "\uffe0\075\uffe0\116\uffe0\121\uffe0\130\uffe0\135\uffe0\144\uffe0" +
    "\164\uffe0\165\uffe0\001\002\000\026\007\uffe8\040\uffe8\075" +
    "\uffe8\116\uffe8\121\uffe8\130\uffe8\135\uffe8\144\uffe8\164\uffe8" +
    "\165\uffe8\001\002\000\026\007\uffec\040\uffec\075\uffec\116" +
    "\uffec\121\uffec\130\uffec\135\uffec\144\uffec\164\uffec\165\uffec" +
    "\001\002\000\026\007\uffe5\040\uffe5\075\uffe5\116\uffe5\121" +
    "\uffe5\130\uffe5\135\uffe5\144\uffe5\164\uffe5\165\uffe5\001\002" +
    "\000\026\007\uffe2\040\uffe2\075\uffe2\116\uffe2\121\uffe2\130" +
    "\uffe2\135\uffe2\144\uffe2\164\uffe2\165\uffe2\001\002\000\026" +
    "\007\uffd0\040\uffd0\075\uffd0\116\uffd0\121\uffd0\130\uffd0\135" +
    "\uffd0\144\uffd0\164\uffd0\165\uffd0\001\002\000\026\007\uffe4" +
    "\040\uffe4\075\uffe4\116\uffe4\121\uffe4\130\uffe4\135\uffe4\144" +
    "\uffe4\164\uffe4\165\uffe4\001\002\000\026\007\uffeb\040\uffeb" +
    "\075\uffeb\116\uffeb\121\uffeb\130\uffeb\135\uffeb\144\uffeb\164" +
    "\uffeb\165\uffeb\001\002\000\004\165\106\001\002\000\004" +
    "\070\107\001\002\000\004\013\110\001\002\000\004\006" +
    "\111\001\002\000\022\007\113\040\046\116\052\121\042" +
    "\135\036\144\041\164\033\165\047\001\002\000\022\007" +
    "\114\040\046\116\052\121\042\135\036\144\041\164\033" +
    "\165\047\001\002\000\026\007\uffcd\040\uffcd\075\uffcd\116" +
    "\uffcd\121\uffcd\130\uffcd\135\uffcd\144\uffcd\164\uffcd\165\uffcd" +
    "\001\002\000\026\007\uffce\040\uffce\075\uffce\116\uffce\121" +
    "\uffce\130\uffce\135\uffce\144\uffce\164\uffce\165\uffce\001\002" +
    "\000\004\014\127\001\002\000\004\014\117\001\002\000" +
    "\004\165\120\001\002\000\004\070\121\001\002\000\004" +
    "\013\122\001\002\000\004\006\123\001\002\000\022\007" +
    "\125\040\046\116\052\121\042\135\036\144\041\164\033" +
    "\165\047\001\002\000\022\007\126\040\046\116\052\121" +
    "\042\135\036\144\041\164\033\165\047\001\002\000\026" +
    "\007\uffcb\040\uffcb\075\uffcb\116\uffcb\121\uffcb\130\uffcb\135" +
    "\uffcb\144\uffcb\164\uffcb\165\uffcb\001\002\000\026\007\uffcc" +
    "\040\uffcc\075\uffcc\116\uffcc\121\uffcc\130\uffcc\135\uffcc\144" +
    "\uffcc\164\uffcc\165\uffcc\001\002\000\004\165\130\001\002" +
    "\000\004\070\131\001\002\000\004\013\132\001\002\000" +
    "\004\006\133\001\002\000\022\007\135\040\046\116\052" +
    "\121\042\135\036\144\041\164\033\165\047\001\002\000" +
    "\022\007\136\040\046\116\052\121\042\135\036\144\041" +
    "\164\033\165\047\001\002\000\026\007\uffc9\040\uffc9\075" +
    "\uffc9\116\uffc9\121\uffc9\130\uffc9\135\uffc9\144\uffc9\164\uffc9" +
    "\165\uffc9\001\002\000\026\007\uffca\040\uffca\075\uffca\116" +
    "\uffca\121\uffca\130\uffca\135\uffca\144\uffca\164\uffca\165\uffca" +
    "\001\002\000\016\013\uffd5\026\uffd5\036\uffd5\040\uffd5\165" +
    "\uffd5\166\uffd5\001\002\000\004\165\141\001\002\000\004" +
    "\014\142\001\002\000\026\007\uffd1\040\uffd1\075\uffd1\116" +
    "\uffd1\121\uffd1\130\uffd1\135\uffd1\144\uffd1\164\uffd1\165\uffd1" +
    "\001\002\000\016\013\144\026\151\036\146\040\150\165" +
    "\147\166\145\001\002\000\004\014\156\001\002\000\016" +
    "\013\uffd8\026\uffd8\036\uffd8\040\uffd8\165\uffd8\166\uffd8\001" +
    "\002\000\016\013\uffd9\026\uffd9\036\uffd9\040\uffd9\165\uffd9" +
    "\166\uffd9\001\002\000\016\013\uffd7\026\uffd7\036\uffd7\040" +
    "\uffd7\165\uffd7\166\uffd7\001\002\000\006\026\154\165\153" +
    "\001\002\000\004\165\152\001\002\000\016\013\uffd6\026" +
    "\uffd6\036\uffd6\040\uffd6\165\uffd6\166\uffd6\001\002\000\016" +
    "\013\uffdb\026\uffdb\036\uffdb\040\uffdb\165\uffdb\166\uffdb\001" +
    "\002\000\004\165\155\001\002\000\016\013\uffda\026\uffda" +
    "\036\uffda\040\uffda\165\uffda\166\uffda\001\002\000\026\007" +
    "\uffdc\040\uffdc\075\uffdc\116\uffdc\121\uffdc\130\uffdc\135\uffdc" +
    "\144\uffdc\164\uffdc\165\uffdc\001\002\000\010\012\160\014" +
    "\162\033\161\001\002\000\016\013\uffd5\026\uffd5\036\uffd5" +
    "\040\uffd5\165\uffd5\166\uffd5\001\002\000\006\165\164\166" +
    "\163\001\002\000\026\007\uffd4\040\uffd4\075\uffd4\116\uffd4" +
    "\121\uffd4\130\uffd4\135\uffd4\144\uffd4\164\uffd4\165\uffd4\001" +
    "\002\000\004\014\166\001\002\000\004\014\165\001\002" +
    "\000\026\007\uffd2\040\uffd2\075\uffd2\116\uffd2\121\uffd2\130" +
    "\uffd2\135\uffd2\144\uffd2\164\uffd2\165\uffd2\001\002\000\026" +
    "\007\uffd3\040\uffd3\075\uffd3\116\uffd3\121\uffd3\130\uffd3\135" +
    "\uffd3\144\uffd3\164\uffd3\165\uffd3\001\002\000\016\013\170" +
    "\026\151\036\146\040\150\165\147\166\145\001\002\000" +
    "\004\014\171\001\002\000\026\007\uffdd\040\uffdd\075\uffdd" +
    "\116\uffdd\121\uffdd\130\uffdd\135\uffdd\144\uffdd\164\uffdd\165" +
    "\uffdd\001\002\000\012\014\176\040\uffb5\100\uffb5\143\uffb5" +
    "\001\002\000\004\015\174\001\002\000\020\040\046\116" +
    "\052\121\042\135\036\144\041\164\033\165\047\001\002" +
    "\000\024\007\uffb0\040\046\116\052\121\042\130\uffb0\135" +
    "\036\144\041\164\033\165\047\001\002\000\010\040\uffb6" +
    "\100\uffb6\143\uffb6\001\002\000\020\040\046\116\052\121" +
    "\042\135\036\144\041\164\033\165\047\001\002\000\024" +
    "\007\uffaf\040\046\116\052\121\042\130\uffaf\135\036\144" +
    "\041\164\033\165\047\001\002\000\006\165\203\166\202" +
    "\001\002\000\006\034\223\035\222\001\002\000\006\034" +
    "\205\035\204\001\002\000\004\166\214\001\002\000\004" +
    "\166\206\001\002\000\004\013\207\001\002\000\004\006" +
    "\210\001\002\000\022\007\212\040\046\116\052\121\042" +
    "\135\036\144\041\164\033\165\047\001\002\000\022\007" +
    "\213\040\046\116\052\121\042\135\036\144\041\164\033" +
    "\165\047\001\002\000\026\007\uffc3\040\uffc3\075\uffc3\116" +
    "\uffc3\121\uffc3\130\uffc3\135\uffc3\144\uffc3\164\uffc3\165\uffc3" +
    "\001\002\000\026\007\uffc4\040\uffc4\075\uffc4\116\uffc4\121" +
    "\uffc4\130\uffc4\135\uffc4\144\uffc4\164\uffc4\165\uffc4\001\002" +
    "\000\004\013\215\001\002\000\004\006\216\001\002\000" +
    "\022\007\220\040\046\116\052\121\042\135\036\144\041" +
    "\164\033\165\047\001\002\000\022\007\221\040\046\116" +
    "\052\121\042\135\036\144\041\164\033\165\047\001\002" +
    "\000\026\007\uffc1\040\uffc1\075\uffc1\116\uffc1\121\uffc1\130" +
    "\uffc1\135\uffc1\144\uffc1\164\uffc1\165\uffc1\001\002\000\026" +
    "\007\uffc2\040\uffc2\075\uffc2\116\uffc2\121\uffc2\130\uffc2\135" +
    "\uffc2\144\uffc2\164\uffc2\165\uffc2\001\002\000\004\166\232" +
    "\001\002\000\004\166\224\001\002\000\004\013\225\001" +
    "\002\000\004\006\226\001\002\000\022\007\230\040\046" +
    "\116\052\121\042\135\036\144\041\164\033\165\047\001" +
    "\002\000\022\007\231\040\046\116\052\121\042\135\036" +
    "\144\041\164\033\165\047\001\002\000\026\007\uffc7\040" +
    "\uffc7\075\uffc7\116\uffc7\121\uffc7\130\uffc7\135\uffc7\144\uffc7" +
    "\164\uffc7\165\uffc7\001\002\000\026\007\uffc8\040\uffc8\075" +
    "\uffc8\116\uffc8\121\uffc8\130\uffc8\135\uffc8\144\uffc8\164\uffc8" +
    "\165\uffc8\001\002\000\004\013\233\001\002\000\004\006" +
    "\234\001\002\000\022\007\236\040\046\116\052\121\042" +
    "\135\036\144\041\164\033\165\047\001\002\000\022\007" +
    "\237\040\046\116\052\121\042\135\036\144\041\164\033" +
    "\165\047\001\002\000\026\007\uffc5\040\uffc5\075\uffc5\116" +
    "\uffc5\121\uffc5\130\uffc5\135\uffc5\144\uffc5\164\uffc5\165\uffc5" +
    "\001\002\000\026\007\uffc6\040\uffc6\075\uffc6\116\uffc6\121" +
    "\uffc6\130\uffc6\135\uffc6\144\uffc6\164\uffc6\165\uffc6\001\002" +
    "\000\004\165\241\001\002\000\004\013\242\001\002\000" +
    "\004\006\243\001\002\000\004\076\245\001\002\000\004" +
    "\007\253\001\002\000\004\166\246\001\002\000\004\015" +
    "\247\001\002\000\020\040\046\116\052\121\042\135\036" +
    "\144\041\164\033\165\047\001\002\000\022\040\046\075" +
    "\251\116\052\121\042\135\036\144\041\164\033\165\047" +
    "\001\002\000\004\014\252\001\002\000\004\007\uffb8\001" +
    "\002\000\026\007\uffb7\040\uffb7\075\uffb7\116\uffb7\121\uffb7" +
    "\130\uffb7\135\uffb7\144\uffb7\164\uffb7\165\uffb7\001\002\000" +
    "\004\014\255\001\002\000\026\007\uffde\040\uffde\075\uffde" +
    "\116\uffde\121\uffde\130\uffde\135\uffde\144\uffde\164\uffde\165" +
    "\uffde\001\002\000\006\165\260\166\257\001\002\000\006" +
    "\034\300\035\277\001\002\000\006\034\262\035\261\001" +
    "\002\000\004\166\271\001\002\000\004\166\263\001\002" +
    "\000\004\013\264\001\002\000\004\006\265\001\002\000" +
    "\022\007\267\040\046\116\052\121\042\135\036\144\041" +
    "\164\033\165\047\001\002\000\022\007\270\040\046\116" +
    "\052\121\042\135\036\144\041\164\033\165\047\001\002" +
    "\000\026\007\uffbb\040\uffbb\075\uffbb\116\uffbb\121\uffbb\130" +
    "\uffbb\135\uffbb\144\uffbb\164\uffbb\165\uffbb\001\002\000\026" +
    "\007\uffbc\040\uffbc\075\uffbc\116\uffbc\121\uffbc\130\uffbc\135" +
    "\uffbc\144\uffbc\164\uffbc\165\uffbc\001\002\000\004\013\272" +
    "\001\002\000\004\006\273\001\002\000\022\007\275\040" +
    "\046\116\052\121\042\135\036\144\041\164\033\165\047" +
    "\001\002\000\022\007\276\040\046\116\052\121\042\135" +
    "\036\144\041\164\033\165\047\001\002\000\026\007\uffb9" +
    "\040\uffb9\075\uffb9\116\uffb9\121\uffb9\130\uffb9\135\uffb9\144" +
    "\uffb9\164\uffb9\165\uffb9\001\002\000\026\007\uffba\040\uffba" +
    "\075\uffba\116\uffba\121\uffba\130\uffba\135\uffba\144\uffba\164" +
    "\uffba\165\uffba\001\002\000\004\166\307\001\002\000\004" +
    "\166\301\001\002\000\004\013\302\001\002\000\004\006" +
    "\303\001\002\000\022\007\305\040\046\116\052\121\042" +
    "\135\036\144\041\164\033\165\047\001\002\000\022\007" +
    "\306\040\046\116\052\121\042\135\036\144\041\164\033" +
    "\165\047\001\002\000\026\007\uffbf\040\uffbf\075\uffbf\116" +
    "\uffbf\121\uffbf\130\uffbf\135\uffbf\144\uffbf\164\uffbf\165\uffbf" +
    "\001\002\000\026\007\uffc0\040\uffc0\075\uffc0\116\uffc0\121" +
    "\uffc0\130\uffc0\135\uffc0\144\uffc0\164\uffc0\165\uffc0\001\002" +
    "\000\004\013\310\001\002\000\004\006\311\001\002\000" +
    "\022\007\313\040\046\116\052\121\042\135\036\144\041" +
    "\164\033\165\047\001\002\000\022\007\314\040\046\116" +
    "\052\121\042\135\036\144\041\164\033\165\047\001\002" +
    "\000\026\007\uffbd\040\uffbd\075\uffbd\116\uffbd\121\uffbd\130" +
    "\uffbd\135\uffbd\144\uffbd\164\uffbd\165\uffbd\001\002\000\026" +
    "\007\uffbe\040\uffbe\075\uffbe\116\uffbe\121\uffbe\130\uffbe\135" +
    "\uffbe\144\uffbe\164\uffbe\165\uffbe\001\002\000\010\040\uffb4" +
    "\100\uffb4\143\uffb4\001\002\000\006\012\334\045\335\001" +
    "\002\000\004\012\320\001\002\000\004\013\321\001\002" +
    "\000\004\006\322\001\002\000\020\040\046\116\052\121" +
    "\042\135\324\144\041\164\033\165\047\001\002\000\020" +
    "\040\046\116\052\121\042\135\330\144\041\164\033\165" +
    "\047\001\002\000\006\165\254\166\325\001\002\000\004" +
    "\014\326\001\002\000\004\007\327\001\002\000\004\002" +
    "\uffed\001\002\000\006\165\254\166\331\001\002\000\004" +
    "\014\332\001\002\000\004\007\333\001\002\000\004\002" +
    "\uffee\001\002\000\016\013\uffd5\026\uffd5\036\uffd5\040\uffd5" +
    "\165\uffd5\166\uffd5\001\002\000\004\165\336\001\002\000" +
    "\004\012\337\001\002\000\016\013\uffd5\026\uffd5\036\uffd5" +
    "\040\uffd5\165\uffd5\166\uffd5\001\002\000\016\013\341\026" +
    "\151\036\146\040\150\165\147\166\145\001\002\000\004" +
    "\006\342\001\002\000\020\040\046\116\052\121\042\135" +
    "\036\144\041\164\033\165\047\001\002\000\022\007\344" +
    "\040\046\116\052\121\042\135\036\144\041\164\033\165" +
    "\047\001\002\000\010\040\ufff0\100\ufff0\143\ufff0\001\002" +
    "\000\016\013\346\026\151\036\146\040\150\165\147\166" +
    "\145\001\002\000\006\006\347\014\350\001\002\000\022" +
    "\007\352\040\046\116\052\121\042\135\036\144\041\164" +
    "\033\165\047\001\002\000\010\040\ufff3\100\ufff3\143\ufff3" +
    "\001\002\000\022\007\353\040\046\116\052\121\042\135" +
    "\036\144\041\164\033\165\047\001\002\000\010\040\ufff1" +
    "\100\ufff1\143\ufff1\001\002\000\010\040\ufff2\100\ufff2\143" +
    "\ufff2\001\002\000\004\006\355\001\002\000\020\040\046" +
    "\116\052\121\042\135\036\144\041\164\033\165\047\001" +
    "\002\000\022\007\357\040\046\116\052\121\042\135\036" +
    "\144\041\164\033\165\047\001\002\000\012\040\uffb1\100" +
    "\uffb1\143\uffb1\165\360\001\002\000\004\014\361\001\002" +
    "\000\010\040\uffb2\100\uffb2\143\uffb2\001\002\000\010\040" +
    "\ufff9\100\ufff9\143\ufff9\001\002\000\010\040\ufff7\100\ufff7" +
    "\143\ufff7\001\002\000\010\040\ufffb\100\ufffb\143\ufffb\001" +
    "\002\000\010\040\ufff5\100\ufff5\143\ufff5\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002\000\004\034" +
    "\371\001\002\000\004\042\372\001\002\000\004\017\373" +
    "\001\002\000\004\043\374\001\002\000\004\035\375\001" +
    "\002\000\006\037\uffef\157\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\010\002\004\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\007\021\010\001\001\000\002\001\001\000\016\005" +
    "\021\014\020\015\015\017\024\025\016\026\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\365\014\363\017\361\025\362" +
    "\026\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\033\007\034\010\036\011\050\012\031" +
    "\016\043\020\044\023\037\027\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\076" +
    "\010\103\011\075\012\077\020\102\023\100\027\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\072\007\034\010\036\011\050\012\031\020" +
    "\044\023\037\027\047\001\001\000\020\007\076\010\103" +
    "\011\075\012\077\020\102\023\100\027\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\111\007\034\010\036\011\050\012\031\020\044" +
    "\023\037\027\047\001\001\000\020\007\076\010\103\011" +
    "\075\012\077\020\102\023\100\027\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\123\007\034\010\036\011" +
    "\050\012\031\020\044\023\037\027\047\001\001\000\020" +
    "\007\076\010\103\011\075\012\077\020\102\023\100\027" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\133\007\034\010\036\011\050\012\031" +
    "\020\044\023\037\027\047\001\001\000\020\007\076\010" +
    "\103\011\075\012\077\020\102\023\100\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\174\007\034\010\036\011\050\012\031\020\044\023" +
    "\037\027\047\001\001\000\020\007\076\010\103\011\075" +
    "\012\077\020\102\023\100\027\074\001\001\000\002\001" +
    "\001\000\022\006\177\007\034\010\036\011\050\012\031" +
    "\020\044\023\037\027\047\001\001\000\020\007\076\010" +
    "\103\011\075\012\077\020\102\023\100\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\210\007\034\010\036\011\050\012" +
    "\031\020\044\023\037\027\047\001\001\000\020\007\076" +
    "\010\103\011\075\012\077\020\102\023\100\027\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\216\007\034\010\036\011" +
    "\050\012\031\020\044\023\037\027\047\001\001\000\020" +
    "\007\076\010\103\011\075\012\077\020\102\023\100\027" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\226\007\034\010\036\011\050\012\031" +
    "\020\044\023\037\027\047\001\001\000\020\007\076\010" +
    "\103\011\075\012\077\020\102\023\100\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\234\007\034\010\036\011\050" +
    "\012\031\020\044\023\037\027\047\001\001\000\020\007" +
    "\076\010\103\011\075\012\077\020\102\023\100\027\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\247\007\034\010\036\011\050\012\031" +
    "\020\044\023\037\027\047\001\001\000\020\007\076\010" +
    "\103\011\075\012\077\020\102\023\100\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\265" +
    "\007\034\010\036\011\050\012\031\020\044\023\037\027" +
    "\047\001\001\000\020\007\076\010\103\011\075\012\077" +
    "\020\102\023\100\027\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\273\007\034\010\036\011\050\012\031\020\044\023" +
    "\037\027\047\001\001\000\020\007\076\010\103\011\075" +
    "\012\077\020\102\023\100\027\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\303\007" +
    "\034\010\036\011\050\012\031\020\044\023\037\027\047" +
    "\001\001\000\020\007\076\010\103\011\075\012\077\020" +
    "\102\023\100\027\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\311\007\034\010\036\011\050\012\031\020\044\023\037" +
    "\027\047\001\001\000\020\007\076\010\103\011\075\012" +
    "\077\020\102\023\100\027\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\322\007\034\010\036\011\050\012\031\020\044\023" +
    "\037\027\047\001\001\000\020\007\076\010\103\011\075" +
    "\012\077\020\102\023\100\027\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\342\007\034\010\036" +
    "\011\050\012\031\020\044\023\037\027\047\001\001\000" +
    "\020\007\076\010\103\011\075\012\077\020\102\023\100" +
    "\027\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\350\007\034\010\036\011\050" +
    "\012\031\020\044\023\037\027\047\001\001\000\002\001" +
    "\001\000\020\007\076\010\103\011\075\012\077\020\102" +
    "\023\100\027\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\355\007\034\010\036" +
    "\011\050\012\031\020\044\023\037\027\047\001\001\000" +
    "\020\007\076\010\103\011\075\012\077\020\102\023\100" +
    "\027\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VAR_GLOB ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_GLOB",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAR_GLOB ::= variables_glo id8 SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_GLOB",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VAR_GLOB ::= VAR_GLOB variables_glo id8 SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_GLOB",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STRUCTURA ::= STRUCT ident id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTURA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STRUCTURA ::= STRUCT ident id1 SENTENCIA id2 ident id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTURA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CICLO_CLASE ::= CLASS ident id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CICLO_CLASE ::= CLASS ident id1 id2 id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CICLO_CLASE ::= CLASS ident id1 VAR_GLOB id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CICLO_CLASE ::= CLASS ident id1 VAR_GLOB id2 id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CICLO_SWITCH ::= SWITCH id5 ident id6 id1 CICLO_CASE id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_SWITCH",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CICLO_CASE ::= CASE numero id8 SENTENCIA BREAK id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_CASE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CICLO_WHILE ::= WHILE id5 ident id24 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CICLO_WHILE ::= WHILE id5 ident id24 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CICLO_WHILE ::= WHILE id5 ident id23 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CICLO_WHILE ::= WHILE id5 ident id23 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CICLO_WHILE ::= WHILE id5 numero id24 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CICLO_WHILE ::= WHILE id5 numero id24 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CICLO_WHILE ::= WHILE id5 numero id23 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CICLO_WHILE ::= WHILE id5 numero id23 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CICLO_IF ::= IF id5 ident id24 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CICLO_IF ::= IF id5 ident id24 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CICLO_IF ::= IF id5 ident id23 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CICLO_IF ::= IF id5 ident id23 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CICLO_IF ::= IF id5 numero id24 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CICLO_IF ::= IF id5 numero id24 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CICLO_IF ::= IF id5 numero id23 numero id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CICLO_IF ::= IF id5 numero id23 numero id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id24 numero id7 ident PLUSPLUS id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id24 numero id7 ident PLUSPLUS id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id24 ident id7 ident PLUSPLUS id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id24 ident id7 ident PLUSPLUS id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id23 numero id7 ident PLUSPLUS id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id23 numero id7 ident PLUSPLUS id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id23 ident id7 ident PLUSPLUS id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CICLO_FOR ::= FOR id5 T_dato ident id22 numero id7 ident id23 ident id7 ident PLUSPLUS id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= ident id22 ident id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_dato ident id22 ident id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_dato ident id22 numero id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_dato ident id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLAFUNCTION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAFUNCTION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLAFUNCTION ::= DECLAFUNCTION id17 ident 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAFUNCTION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLAFUNCTION ::= DECLAFUNCTION ident 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAFUNCTION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLAFUNCTION ::= DECLAFUNCTION numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAFUNCTION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLAFUNCTION ::= DECLAFUNCTION id25 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAFUNCTION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLAFUNCTION ::= DECLAFUNCTION T_dato id17 ident 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAFUNCTION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLAFUNCTION ::= DECLAFUNCTION T_dato ident 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAFUNCTION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCTION ::= ident id5 DECLAFUNCTION id6 id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCTION ::= T_dato ident id5 DECLAFUNCTION id6 id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETORNAR ::= RETURN ident id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA RETORNAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= CICLO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA CICLO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA CICLO_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= CICLO_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= CICLO_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA CICLO_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= CICLO_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA CICLO_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= T_dato Main id5 id6 id1 RETURN numero id7 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= T_dato Main id5 id6 id1 SENTENCIA RETURN numero id7 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CARGAR ::= id26 Include id23 Libreria id10 Letra_H id24 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DecCLASE ::= T_dato ident COLONCOLON ident id5 DECLAFUNCTION id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DecCLASE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CARGAR_FUNCTION ::= T_dato ident id5 DECLAFUNCTION id6 id1 id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CARGAR_FUNCTION ::= T_dato ident id5 DECLAFUNCTION id6 id1 SENTENCIA id2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CARGAR_FUNCTION ::= T_dato ident id5 DECLAFUNCTION id6 id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CARGAR_CLASE ::= DecCLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CARGAR_CLASE ::= CARGAR_CLASE DecCLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CARGAR_CLASE ::= CARGAR_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CARGAR_CLASE ::= CARGAR_CLASE CARGAR_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CARGAR_CLASE ::= STRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CARGAR_CLASE ::= CARGAR_CLASE STRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CARGAR_CLASE ::= CICLO_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CARGAR_CLASE ::= CARGAR_CLASE CICLO_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARGAR_CLASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDEN ::= CARGAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDEN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDEN ::= IDEN CARGAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDEN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARA_USING ::= USING NAMESPACE STD id7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_USING",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // COMPILADOR ::= IDEN DECLARA_USING INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPILADOR",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // COMPILADOR ::= IDEN DECLARA_USING CARGAR_CLASE INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPILADOR",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= COMPILADOR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

